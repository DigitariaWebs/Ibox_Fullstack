version: '3.8'

services:
  # Node.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ibox-api-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=5000
    env_file:
      - .env.production
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ibox-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # MongoDB Database (Production)
  mongodb:
    image: mongo:7.0
    container_name: ibox-mongodb-prod
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=ibox_production
    volumes:
      - mongodb_data_prod:/data/db
      - mongodb_config_prod:/data/configdb
      - mongodb_logs:/var/log/mongodb
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf
    networks:
      - ibox-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Redis Cache (Production)
  redis:
    image: redis:7.2-alpine
    container_name: ibox-redis-prod
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ibox-network
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:1.25-alpine
    container_name: ibox-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - app
    networks:
      - ibox-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Watchtower (Auto-updates)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: ibox-watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_INCLUDE_RESTARTING=true
    command: --interval 300 --cleanup
    networks:
      - ibox-network

# Networks
networks:
  ibox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Volumes (Production)
volumes:
  mongodb_data_prod:
    driver: local
  mongodb_config_prod:
    driver: local
  mongodb_logs:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs_prod:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local